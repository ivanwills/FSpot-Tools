#!/usr/bin/perl

# Created on: 2009-06-16 21:02:08
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use FSpot;
use Image::ExifTool;
use Path::Class;
use DateTime;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
	verbose => 0,
	man     => 0,
	help    => 0,
	VERSION => 0,
);

main();
exit 0;

sub main {

	Getopt::Long::Configure('bundling');
	GetOptions(
		\%option,
		'fix|f',
		'files|F',
		'test|t',
		'verbose|v+',
		'man',
		'help',
		'VERSION!',
	) or pod2usage(2);

	if ( $option{'VERSION'} ) {
		print "$name Version = $VERSION\n";
		exit 1;
	}
	elsif ( $option{'man'} ) {
		pod2usage( -verbose => 2 );
	}
	elsif ( $option{'help'} ) {
		pod2usage( -verbose => 1 );
	}

	# do stuff here
	my $fspot = FSpot->new;

	my $photos = $fspot->schema->resultset('Photos')->search;

	PHOTO:
	while ( my $photo = $photos->next ) {
		my $file = $photo->uri;
		$file =~ s{^file://}{}xms;
		$file =~ s{%(\d\d)}{chr hex $1}gexms;
		$file = file($file);

		next PHOTO if -f $file;

		my $name     = $file->basename;
		my $quoted   = $file =~ s/"/\\"/gxms;
		my @versions = grep {$_ =~ /$name$/} `locate "$quoted"`;
		chomp $versions[0];

		print
			!@versions       ? "completely missing\t$file\n"
			: @versions == 1 ? "moved $file\t=> $versions[0]\n"
			:                  "Several options found for\t$file\n";

		if ( @versions == 1 && $option{fix} ) {

			my $old = $photo->uri =~ /^file:/ ? $photo->uri : 'file://' . $photo->uri;
			my $new = 'file://' . $versions[0];
			$new =~ s{ ( [^-\w\s/:\()] ) }{sprintf "%x", ord $1}gexms;

			my $version = $fspot->schema->resultset('PhotoVersions')->search({
				photo_id => $photo->id,
				uri      => $old,
			});

			if ( $version->count != 1 ) {
				warn "Wont fix $file can't find appropriate version!\n";
				next PHOTO;
			}

			print "$old\t => $new\n" if $option{verbose} || $option{test};
			if ( !$option{test} ) {
				$fspot->backup_db;

				$fspot->schema->resultset('Photos')->search({
					id  => $photo->id,
					uri => $old,
				})->update({ uri => 'file://' . $new });

				$version->update({ uri => $new});
			}
		}
	}

	return;
}

__DATA__

=head1 NAME

fspot-missing - Find any files that are in the fspot db but missing on the
file system

=head1 VERSION

This documentation refers to fspot-missing version 0.1.

=head1 SYNOPSIS

   fspot-missing [option]

 OPTIONS:
  -d --dir=directory
                Check if the missing files have been moved to this directory
                and update the database if they have.
  -f --fix      Fix the f-spot db's file locations (if only one file match)
  -F --file     Move the file to match f-spot's location (if only one match)
  -i --ignore=regex
                Ignore matching files found in directories that match this
                regex. (eg ignore back/copy directories so fix options can
                work more of the time)

  -v --verbose  Show more detailed option
     --version  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for fspot-missing

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2009 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW, Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
