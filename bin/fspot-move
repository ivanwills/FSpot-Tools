#!/usr/bin/perl

# Created on: 2009-06-18 06:07:09
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use FSpot;
use Image::ExifTool qw/ImageInfo/;
use Path::Class;
use File::Copy qw/move/;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
	verbose => 0,
	man     => 0,
	help    => 0,
	VERSION => 0,
);

if ( !@ARGV ) {
	pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {

	Getopt::Long::Configure('bundling');
	GetOptions(
		\%option,
		'bydate|d',
		'limit|l=i',
		'test|t',
		'verbose|v+',
		'man',
		'help',
		'VERSION!',
	) or pod2usage(2);

	if ( $option{'VERSION'} ) {
		print "$name Version = $VERSION\n";
		exit 1;
	}
	elsif ( $option{'man'} ) {
		pod2usage( -verbose => 2 );
	}
	elsif ( $option{'help'} ) {
		pod2usage( -verbose => 1 );
	}

	# do stuff here
	my $fspot = FSpot->new;

	my $where;

	if ( $option{bydate} && @ARGV ) {
		$where = {
			file => [ 'REGEXP', '^(file://)?(' . (join '|', map { file($_)->absolute } @ARGV) . ')$' ],
		};
	}

	my $photos = $fspot->schema->resultset('Photos')->search( $where );
	my $good  = 0;
	my $vgood = 0;
	my $bad   = 0;
	my $error = 0;

	PHOTO:
	while ( my $photo = $photos->next ) {
		my $file = $photo->uri;
		$file =~ s{^file://}{}xms;
		$file =~ s{%(\d\d)}{chr hex $1}gexms;
		$file = file($file);

		next PHOTO if !-f $file;

		my $old = $photo->uri =~ /^file:/ ? $photo->uri : 'file://' . $photo->uri;
		#my $new = 'file://' . $versions[0];
		#$new =~ s{ ( [^-\w\s/:\()] ) }{sprintf "%x", ord $1}gexms;

		my $version = $fspot->schema->resultset('PhotoVersions')->search({
			photo_id => $photo->id,
			uri      => $old,
		});

		if ( $option{bydate} ) {
			my $count = by_date( $fspot, $file, $old, $photo, $version );
			  $count == 1  ? $good++
			: $count == 2  ? $vgood++
			: $count == -1 ? $bad++
			:                $error++;
		}

		last PHOTO if $option{limit} && $good >= $option{limit};
	}

	my $count = $photos->count;
	warn <<WARN;
Very Good : $vgood
Good      : $good
Bad       : $bad
Error     : $error
Total     : $count
WARN

	return;
}

my $exif;
sub by_date {
	my ($fspot, $file, $old, $photo, $version) = @_;

	return -1 if !-f $file;

	# check that the file is not already in a date dir
	return 2 if $file =~ m{ \d\d\d\d / \d\d / \d\d / [^/]+$}xms;

	$exif ||= Image::ExifTool->new();
	open my $img, '<', $file or return 0;
	my $create_date = $exif->ImageInfo($img)->{CreateDate};

	return 0 if !$create_date;

	my ( $y, $m, $d, $H, $M, $S ) = split /[\s:]/, $create_date;

	mkdir "$ENV{HOME}/Photos/$y"       if !-d "$ENV{HOME}/Photos/$y";
	mkdir "$ENV{HOME}/Photos/$y/$m"    if !-d "$ENV{HOME}/Photos/$y/$m";
	mkdir "$ENV{HOME}/Photos/$y/$m/$d" if !-d "$ENV{HOME}/Photos/$y/$m/$d";

	warn "Moving $file to $ENV{HOME}/Photos/$y/$m/$d/\n" if $option{verbose} || $option{test};

	if ( !$option{test} ) {
		$fspot->backup_db;

		# move the file to it's final location
		move $file, "$ENV{HOME}/Photos/$y/$m/$d/" . $file->basename;

		# update the record in the photo table
		$photo->uri($file);
		$photo->update;

		# update the version table
		$version->update({ uri => $file});
	}

	return 1;
}

__DATA__

=head1 NAME

fspot-move - Move photos on the file system and keep f-spot up to date

=head1 VERSION

This documentation refers to fspot-move version 0.1.

=head1 SYNOPSIS

   fspot-move --bydate [--limit=NN] [--test] [--verbose] [src]
   fspot-move [--verbose] [--test] src dest

 OPTIONS:
  -d --bydate  Move the files to the date ordered directories (if they are not already that way)
  -l --limit=int
               Limit the number of opperations to int (useful for more througher testing)
  -t --test    Test any move with out actually modifiying any thing

  -v --verbose Show more detailed option
     --version Prints the version information
     --help    Prints this help information
     --man     Prints the full documentation for fspot-move

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2009 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
