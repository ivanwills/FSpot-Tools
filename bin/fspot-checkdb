#!/usr/bin/perl

# Created on: 2009-06-23 06:59:48
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Carp qw/cluck longmess/;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use FSpot;
use Path::Class;
use IO::Prompt qw/prompt/;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;
my @suffixes = qw/
	JPEG
	JPG
	GIF
	PNG
	SVG
	CR2
	NEF
	PEF
	RAW
	TIFF
	TIF
	ORF
	SRF
	DNG
	CRW
	PPM
	MRW
	RAF
	BMP
/;
my $suffixes = '(?:' . ( join '|', @suffixes ) . ')';

my %option = (
	verbose => 0,
	man     => 0,
	help    => 0,
	VERSION => 0,
);

main();
exit 0;

sub main {

	Getopt::Long::Configure('bundling');
	GetOptions(
		\%option,
		'fix|f',
		'recurse|r!',
		'test|t',
		'viewer|i=s',
		'verbose|v+',
		'man',
		'help',
		'VERSION!',
	) or pod2usage(2);

	if ( $option{'VERSION'} ) {
		print "$name Version = $VERSION\n";
		exit 1;
	}
	elsif ( $option{'man'} ) {
		pod2usage( -verbose => 2 );
	}
	elsif ( $option{'help'} ) {
		pod2usage( -verbose => 1 );
	}

	# do stuff here
	my $fspot  = FSpot->new;

	if (@ARGV) {
		for my $file (@ARGV) {
			-d $file ? check_dir($fspot, $file) : check_file($fspot, $file);
		}
	}
	else {
		check_db($fspot);
	}

	return;
}

sub check_db {
	my ($fspot) = @_;

	my $photos = $fspot->schema->resultset('PhotoVersions')->search();

	while ( my $photov = $photos->next ) {
		if ( $photov->uri !~ m{^file://} ) {
			print $photov->uri . " is bad\n";

			if ( $option{fix} ) {
				$photov->uri('file://' . $photov->uri);
				$photov->update;

				if ( $photov->photo_id->uri eq $photov->uri ) {
					$photov->photo_id->uri('file://' . $photov->uri);
					$photov->photo_id->update;
				}
			}
		}
	}

	return;
}

my %unknown;
sub check_file {
	my ($fspot, $file) = @_;

	$file = file($file)->absolute if !ref $file;

	if ( $file !~ m{ [.] $suffixes $}ixms ) {
		my ($suffix) = $file =~ m{ [.] (\w+) $}xms;
		warn ".$suffix unknown file type\n($file)\n" if !$unknown{lc $suffix}++ && $option{verbose};
		return;
	}

	my $exact = $fspot->schema->resultset('PhotoVersions')->search({
		uri => 'file://' . $file,
	});

	return if $exact->count == 1;

	if ( $exact->count > 1 ) {
		warn "$file\: Several versions of found\n";
		return;
	}

	# remove empty files that have image suffixes
	unlink $file if -s $file == 0;

	my $base = $file->basename;
	my $approx = $fspot->schema->resultset('PhotoVersions')->search({
		uri => { LIKE => "%$base" },
	});

	if ( !$approx->count ) {
		warn "completely missing: $file\n";
		my $old_version;
		my $name;

		# now check if this is a possible missing version
		if ( $file =~ m{^ ( .* / ) ( [^/]+ ) \s+ [(] ( [^/]* ) [)] [.] \w+ $}xms ) {
			print "$file appears to be a modified file\n";
			$old_version = "$1$2";
			$name = $3;
		}

		print "$file is not in F-Spot\n" if !$option{fix} || ( $option{fix} && $option{verbose} );

		if ( $option{fix} ) {
			$fspot->backup_db;

			if ( $old_version ) {
				# adding this file as a new version of old photo, need to find old photo
				warn "Need to add code to check if the old version is actually added ($old_version)\n";
				my $old = $fspot->schema->resultset('Photos')->search({
					uri => { LIKE => "%$old_version.%" },
				});

				if ($old->count == 1) {
					warn "found parent now need to add version\n";
					$fspot->add_photo_version( $file, $old->first->id, $name );
				}
				elsif ( $old->count == 0 ) {
					warn "no old image in db\n";
				}
				else {
					warn "several candidates";
				}
			}
			else {
				# add this image as a new photo
				$fspot->add_photo($file);
				print warn "Added $file\n";
			}
		}
	}
	else {
		print "possibly found: $file\n";
		$approx->reset;

		ALTERNATIVE:
		while ( my $photo = $approx->next ) {
			my $file2 = $photo->uri;
			$file2 =~ s{^file://}{}xms;
			$file2 =~ s{%(\d\d)}{chr hex $1}gexms;
			$file2 = file($file2);
			print "\t\t$file2 ";

			if ( -s $file == -s $file2 ) {
				# diff the two files to see if there is a difference
				if ( system 'diff', $file, $file2 ) {
					# diff returns true value if files differ
					if ( $option{viewer} ) {
						system $option{viewer}, $file, $file2;
						if ( prompt "Were the photos the same? [yN] ", '-y' ) {
							unlink $file;
							print "\tDeleted the file\n";
							last ALTERNATIVE;
						}
						else {
							print "\tdon't know what to do";
						}
					}
					else {
						print "\tFixes differ, don't know what to do";
					}
				}
				else {
					# files are the same
					if ($option{fix}) {
						unlink $file;
						print "\tDeleted the file\n";
						last ALTERNATIVE;
					}
					else {
						print "\tprobably the same file would delete";
					}
				}
			}
			else {
				if ( $option{viewer} ) {
					system $option{viewer}, $file, $file2;
					if ( prompt "Were the photos the same? [yN] ", '-y' ) {
						unlink $file;
						print "\tDeleted the file\n";
						last ALTERNATIVE;
					}
					else {
						print "\tdon't know what to do";
					}
				}
				else {
					print "\tDon't know what to do";
				}
			}
			print "\n";
		}
	}

	return;
}

my %seen;
sub check_dir {
	my ($fspot, $dir) = @_;

	$dir = dir($dir)->absolute if !ref $dir;

	while ( my $file = $dir->next ) {
		next if $file =~ m{/[.][.]?$};

		if ( -d $file && !$seen{$file} ) {
			$seen{$file} = 1;
			check_dir( $fspot, $file ) if $option{recurse};
		}
		elsif ( -f $file ) {
			check_file( $fspot, $file );
		}
	}

	return;
}

__DATA__

=head1 NAME

fspot-checkdb - Check the F-Spot database for any issues

=head1 VERSION

This documentation refers to fspot-checkdb version 0.1.

=head1 SYNOPSIS

   fspot-checkdb [option] [files and/or directories]

 OPTIONS:
  -f --fix      Fix any issues that can be fixed
  -t --test     Test any fixing

  -v --verbose  Show more detailed option
     --version  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for fspot-checkdb

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2009 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
